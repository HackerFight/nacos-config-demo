server:
  port: 8081


spring:
  application:
    name: nacos-config-clent
  cloud:
    nacos:
      discovery:
        server-addr: 47.96.111.179:8848  #注册中心地址
      config:
        server-addr: 47.96.111.179:8848  #配置中心地址
        file-extension: yaml
        #Namespace 的常用场景之一是不同环境的配置的区分隔离，例如开发测试环境和生产环境的资源（如配置、服务）隔离等.
        #默认是public，可以在nacos上创建namespace,这里指定id
        namespace: f50b3a49-dbf6-47fc-9825-377b4ebf13cb  #qiuguan-dev
        group: qiuguan  #也可以自定义group,默认就是 DEFAULT_GROUP
        #prefix: nacosConfigClient   #默认是 ${spring.application.name}
        extension-configs:  #请看自定义dataId.png图片
          - dataId: test01.yaml  #nacos上的dataId
            group: group_01
            refresh: true   #默认就是false, 这里是true搭配@RefreshScope注解才可以工作
          - dataId: test02.yaml
            group: group_02 #nacos上的dataId
        shared-configs:  #共享配置。微服务的数量越来越多，势必会有相同的配置，这时我们可以将相同的配置抽取出来作为项目中共有的配置
          - dataId: db_config.yaml  #nacos上的dataId
            group: db_group
            refresh: true   #默认就是false, 这里是true搭配@RefreshScope注解才可以工作
          - dataId: log_config.yaml
            group: log_group
            refresh: true


#在 Nacos Spring Cloud 中，dataId 的完整格式如下：
#${prefix}-${spring.profiles.active}.${file-extension}
#  。prefix 默认为 spring-application.name 的值，也可以通过配萱项 spring.cloud.nacos.config.prefix 来配置。
#  。spring-profiles.active 即为当前环境对应的 profile，：当spring-profiles.active 为空时，对应的连接符 - 也將不存在，datald 的拼接格式变 成 $fprefixt.$(file-extension}
#  •file-exetension 为配置内容的数据格式，可以通过配置项 spring.cloud.nacos.config.file-extension 来配置。目前只支持 properties 和yaml 类型，默认是properties